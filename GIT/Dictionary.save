#Dictionary
Git: Sistema para controle de versionamento
GitHub: Plataforma para armazenar codigo versionado
commit: versão do codigo
commits atomicos: comitar apenas um trecho do codigo
merge: unir dois codigos distintos escolhendo qual versão ira permanecer 
branch: São ramificões do codigo onde a branch principal contem o codigo mais estavel
Pull request: Fazer uma resquisão para aprovar o seu merge a breanch principal
.gitignore: contem diretorios e arquivos que devem ser ignorados pelo controle de versão 
README.me: São instruções para inidcar para as pessoas como usar o diretorio


#Comands
$ git init # Inicializa o controle de versionamento
$ git add "nome-arquivo.txt" # adiciona um arquivo ao controle de versão
$ git add . #adiciona todos os arquivos novos e alterados ao Git
$ git add -p #adiciona apenas alguma trechos modificados
$ git commit -m 'Firist Commit' #Cria a uma versão do codigo
$ git commit --amend  #Altera no nome da ultimo commit 
$ git push origin main # Envia as modificações ao diretorio main
$ git push origin main --force # Envia as modificações forçando as seguir os historico local
$ git push origin --delete nome-branch #Remove uma branch remotamente
$ git status #Mostra o status do arquivos no controle de versionamento

$ git reflog #Mostra as versões
$ git pull #puxa o codigo mais atual
$ git reset --hard <hash> #Volta a versão da hash do commit e ignora todas as mudanção feitas depois, obs: os commits apos ele serão apagados (evitar usar na branch principal pois ira alterar o historico)
$ git reset --soft <hash> #Volta a versão da hash do commit mas as alterações são matidas para que voce mesmo possa arrumar
$ git revert <hash> #desfaz as alteraçõs feitas em um commit
$ git remote add origin  https://github.com/nome/repositorio #Defini para o codigo sera enviado
$ git branch #Mostra todas as branch disponiveis
$ git branch nome-branch #Cria uma nova branch
$ git checkout nome-branch #Seleciona uma branch
$ git checkout - #volta pra branch que estava selecionada anteriormente
$ git branch -d nome-branch #Remove uma branch localmente
$ git pus git remote add origin #https://github.com/nome/repositorio# defini para o codigo sera enviado
$ git merge --continue # Continua o merge depois de resolver os conflitos
$ git merge --abort #aborta um merge mal sucedido
$ git rebase -i HEAD~2 #junta com o commit anterior
$ git archive master --format=zip --output=neto.zip #cria arquivo zip
$ touch .gitignore #criando um arquivo .gitignore


#Messages
No commit yet: nenhum commmit feito ainda 
Untracked file: arquivos fora do controle de versionamento

#Boas praticas 
-Nunca altere o historico(linha do tempo) da master 
-Use git revert na master para na quebrar o historico
-Use git reset em branch separada para evitar commit sujos
