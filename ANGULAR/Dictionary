#DOCUMENTAÇÃO: https://angular.io/

#Dictionary
ANGULAR2: É um framework open source(Git Hub) da google + microsft, 
DECORATOR(@): É uma anotação para passas informações adicionais para o comilador
Interpolação: ‘embedar’ expressões dentro de uma área delimitada por {{ .. }}
Diretivas: São intruções que podemos passar para o template/codigo HTML. Existem dois tipos Diretivas estruturais/logica que modificam a estruram do dom: Ex *ngFor e Diretivas de atributos que modificam o elemento a qual foi passado. Ex: ng-class e ng-style
app.module.ts: modulo raiz da aplicação
Data Binding(Ligação de dados): associar informações do componente ao template(HTML) e vice versa (Interpolação e eventos(Click no botão))
two way Data Binding: Atualização tanto do template quanto do componente
Buil de dev vs Build de produção: O Build de dev não e minificado como o de produção ou seja, um desenvolvedor ainda consegue ler o codigo
Serviçõs: São classes responsaveis por buscar/enviar dados para o servidor(CRUD), alem de fazer toda a loginca com esses dados. Tambem são usados por conter funções que são usadas em varios componentes(Metodos utilitarios) evitando a duplicidade de codigdo
Modulo root(app.module.ts): É o modulo que junta todos os importes de componentes, servicios ..., ele possue escopo global ou seja, todos os componentes tem acesso ao que foi importado dentro dele 
Modulo de funcionalidade: esse modulo esta dentro de cada compoente e posso escopo local, ou seja apenas o componente tem acesso
Pipes: São filtros que modificam a forma que os dados são exibidos na tela
Guarda de rotas: Responsavel por verificar se um usuario tem acesso a uma rota
Guarda de rotas de desativação: Responsavel por verificar se um usuario pode sair da rota atual
Guarda de rotas Resolver: Carrega um objeto antes de ser carregado pela rota do componente

#Comandos
*Angular Cli*
$ npm install -g angular-cli #Intalando o angular-cli requer node versao >=4
$ ng --version #versão do angular cli
$ ng new nomde_projeto #Criando um novo projeto
$ ng init #inicializa um projeto, funciona da mesma forma que o ng new a diferença é que o init cria no direotrio atual e o new cria um novo diretorio para o projeot
$ ng serve #constroi o projeto para o browser
$ ng g c nomecomponete #gera um componente 
$ ng g m nomemoudlo #gera um novo modulo
$ ng g s nomedoservico #gera um novo servico
$ ng g p nomedopipe #gera uma novo pipe
$ ng new meu-projeto --style=sass #gera um projeto usando o pre-processador sass
$ ng new meu-projeto --style=less #gera um projeto usando o pre-processador less
$ ng new meu-projeto --style=stylus #gera um projeto usando o pre-processador stylus
$ ng set defaults.styleExt scss # usa o pre-processador sass em um projeto existente
$ ng set defaults.styleExt less # usa o pre-processador less em um projeto existente
$ ng set defaults.styleExt styl # usa o pre-processador styl em um projeto existente
$ ng add lint #adiciona o lint ao projeto(o Lint analisa o seu codigo e verifica seu codigo de acordo com o style guide)
$ ng lint #execunta o lint no projeto
$ ng test #executa todos os test unitarios do projeto usando o jasmine
$ ng e2e #executa os teste de integracao
$ ng build #Gera o build de desenvolvimento, ou seja, os arquivos ainda não foram minificados e podem ser debugados. o Arquivo main.bundle possui todo o condigo fonte da aplicacao, e o polyfills tem o codigo auxiliar que ajuda o browser a rendenrizar o codigo
$ ng build --prod #Gera um build para a produção, todos os arquivos já estao minificados


#Diretivas
*ngFor: Cria uma expressão for. Ex.:  <li *ngFor="let curso of cursos"let curso of cursos">
*ngIf: Cria uma expressao If. Ex.: <div *ngIf="cursos.length > 0 ">Lista de cursos:</div>
*ngSwitch: Cria uma expressao switch. Ex.: <div class="container" [ngSwitch]="abaAtiva">  <p *ngSwitchCase="'Mapa'"> Modo Mapa ativo</p> <p *ngSwitchCase="'Lista'"> Modo Lista ativo</p>
*ngClass: Usado para moder alterar class de uma elemento
*ngStyle: Usado para acessar o style do elemento
*ng-content: Usado para passar conteudo do conteudo pai para o filho.
routerLinkActive: Usado no template para aplicar uma classe quando a rota estiver ativa. Ex.:<li routerLinkActive = "active"><a routerLink = "/login">Login</a></li>

#Decorator
@Input: Transformar uma variavel em uma propriedade para ser usada no template 
@Output: Expoe o informações do filho para o componet pai 
@ViewChild: Usado para obter elementos do DOM
@HostListener: Usado para escutar eventos do DOM
@Injectable: Usado para usar injeção de dependencia


#Estrutura
Karma.conf.js -> arquivo de configuração dos tests
/node_module -> contem todos os pacotes e bibliotecas do npm necssarios para o projeto
/environments -> diretorio que contem as configurações do ambiente de prodtução e homologacao na hora de fazer a building
/src -> diretorio aonde fica o condigo fonte da aplicação
/dist -> diretorio aodde contem todos os arquivos gerandos com o build
angular.json -> Arquivo de configuração do projeto
package.json -> contem todas as bibliotecas, diretivas e dependecia necssario para o projeto. Ele contem 2 dependecias separadas, uma(dependencies) contem contas as bibliotecas necessarias para executar o projeto e a outra(devDependencies) possui as bibliotecas para desenvolver o projeto
eslintrc.json -> Arquivo de configuração do lint
tsconfig.json -> Configurações do TapyScript
src/app/main.ts -> Ira fazer o bootstrap da aplicação
src/app/polyfulls -> biblioteca auxiliares

#Metadados

declarations: Componentes que teram acesso aos imports e providers
imports: Modulos que sue serão importados
exports: Componetes que serão visiveis a outros componentes
providers: Serviços que poderão ser utilizados

#Boas praticas
*Pastas com nomes minusculos e palavras separadas por '-'
*Nome de class sempre com a primeira letra maiscula
*Nome de variaveis com a primeira letra minuscula
*Somente usar templates inline se o codigo HTML tiver menos de 3 linhas 
*Primeiro import do Angular depois os meus imports
*Nome da variaveis privadas começar com underscore '_'
 
 

